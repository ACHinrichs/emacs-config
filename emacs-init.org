
* Org-related external file
Load general org-config from other file 
#+begin_src emacs-lisp
(with-eval-after-load "org"
  ;; load extra configs to org mode
  (org-babel-load-file "~/.emacs.d/org-config.org"))
#+end_src

** Org-Roam

Partly stolen from the following sites:
 - https://systemcrafters.net/build-a-second-brain-in-emacs/getting-started-with-org-roam/

Load Packages
#+begin_src emacs-lisp
  (use-package org-roam
	:ensure t
	:custom
	(org-roam-directory "~/sciebo/org-roam")
	:bind (("C-c n l" . org-roam-buffer-toggle)
	   ("C-c n f" . org-roam-node-find)
	   ("C-c n i" . org-roam-node-insert)
	   ("C-c n g" . org-roam-graph)
	   ("C-c n c" . org-roam-capture)

	   :map org-mode-map
	   ("C-M-i"    . completion-at-point))
  :config
  (org-roam-db-autosync-mode))
#+end_src
** Add tags to node display
#+begin_src emacs-lisp
  (setq org-roam-node-display-template
      (concat "${title:*} "
              (propertize "${tags:10}" 'face 'org-tag)))
#+end_src

#+RESULTS:
: ${title:*} ${tags:10}

** bibtex config
Sets locations for notes, the bibtex-file and pdfs, specifies the template for notes
#+begin_src emacs-lisp
    (setq
     bibtex-completion-notes-path "~/sciebo/org-roam"
     bibtex-completion-bibliography "~/sciebo/org-roam/bibliography.bib"
     bibtex-completion-library-path "~/sciebo/org-roam/pdfs"
     bibtex-completion-pdf-field "file"
     bibtex-completion-notes-template-multiple-files
     (concat
      ":PROPERTIES:\n:"
      "ID:         %(org-id-uuid)\n"
      ":ROAM_REFS: @${=key=}\n"
      ":END:\n"
      "#+TITLE: ${title}\n"
      "#+ROAM_KEY: cite:${=key=}\n"
      "#+FILETAGS: paper\n"
      "- keywords :: ${keywords}\n"
      "* TODO Notes\n"
      ":PROPERTIES:\n"
      ":Custom_ID: ${=key=}\n"
      ":NOTER_DOCUMENT: [[${file}]]\n"
      ":AUTHOR: ${author-abbrev}\n"
      ":JOURNAL: ${journaltitle}\n"
      ":DATE: ${date}\n"
      ":YEAR: ${year}\n"
      ":DOI: ${doi}\n"
      ":URL: ${url}\n"
      ":END:\n\n"
      )
     )
#+end_src

#+RESULTS:
#+begin_example
:PROPERTIES:
:ID:         %(org-id-uuid)
:ROAM_REFS: @${=key=}
:END:
,#+TITLE: ${title}
,#+ROAM_KEY: cite:${=key=}
,* TODO Notes
:PROPERTIES:
:Custom_ID: ${=key=}
:NOTER_DOCUMENT: [[${file}]]
:AUTHOR: ${author-abbrev}
:JOURNAL: ${journaltitle}
:DATE: ${date}
:YEAR: ${year}
:DOI: ${doi}
:URL: ${url}
:END:

#+end_example

Set keybinding, ~C-c n~ is org-roam prefix, so that fits

#+begin_src emacs-lisp
(global-set-key (kbd "C-c n r") 'ivy-bibtex) ; keybinding 
#+end_src

#+RESULTS:
: ivy-bibtex

** Org-Roam-Bibtex
#+begin_src emacs-lisp
    (use-package org-roam-bibtex
      :after (org-roam)
      :hook (org-roam-mode . org-roam-bibtex-mode)
      :config
      (setq org-roam-bibtex-preformat-keywords
       '("=key=" "title" "url" "file" "author-or-editor" "keywords"))
      (setq orb-templates
            '(("r" "ref" plain (function org-roam-capture--get-point)
               ""
               :file-name "${slug}"
               :head ":PROPERTIES:\n:ID:%(org-id-get-create)\n:ROAM_REFS:@${=key=}\n:END:\n
  #+TITLE: ${=key=}: ${title}\n#+ROAM_KEY: ${ref}

    - tags ::
    - keywords :: ${keywords}

    \n* ${title}\n  :PROPERTIES:\n  :Custom_ID: ${=key=}\n  :URL: ${url}\n  :AUTHOR: ${author-or-editor}\n  :NOTER_DOCUMENT: %(orb-process-file-field \"${=key=}\")\n  :NOTER_PAGE: \n  :END:\n\n"

               :unnarrowed t))))

#+end_src

#+RESULTS:
| org-roam-bibtex-mode |

** Fix multiple-tag bug in ~org-roam-ui~
#+begin_src elisp
(setq org-roam-database-connector 'sqlite)
#+end_src

#+RESULTS:
: sqlite

* Github Co-Pilot
Setup using [[https://robert.kra.hn/posts/2023-02-22-copilot-emacs-setup/][this blogpost]]

Ensure requirements are installed
#+begin_src elisp
  (require 'cl)
  (let ((pkg-list '(use-package
                     s
                     dash
                     editorconfig
                     company
                     jsonrpc)))
    (package-initialize)
    (when-let ((to-install (map-filter (lambda (pkg _) (not (package-installed-p pkg))) pkg-list)))
      (package-refresh-contents)
      (mapc (lambda (pkg) (package-install pkg)) pkg-list)))
#+end_src

#+RESULTS:

Load =copilot.el=

#+begin_src elisp
  (use-package copilot
    :load-path (lambda () (expand-file-name "copilot.el" user-emacs-directory))
    ;; don't show in mode line
    :diminish
    :config (setq copilot-indent-offset-warning-disable t) 
    :bind (("C-c c c" . copilot-complete)
           ("C-c c a" . copilot-accept-completion) ; probably im going to use Tab more often
           ("C-c <right>" . copilot-accept-completion-by-word)
           ("C-c S-<right>" . copilot-accept-completion-by-line)
           ("C-c c <down>" . copilot-next-completion)
           ("C-c c <up>". copilot-previous-completion)))  
#+end_src

#+RESULTS:
: copilot-previous-completion

Set up tabulator to use copilot, company or indentation.

#+begin_src elisp
  (defun ahi-custom-tab ()
    "Tab command that will complet with copilot if a completion is
  available. Otherwise will try company, yasnippet or normal
  tab-indent."
    (interactive)
    (cond ((minibufferp) (minibuffer-complete))
          ((use-region-p) (indent-region (region-beginning) (region-end)))
          ((and (bound-and-true-p copilot-mode) (copilot-accept-completion)))
          ((and (bound-and-true-p company-mode) (company-complete)))
          ((and (bound-and-true-p yas-minor-mode) (yas-expand))) 
          (t (indent-for-tab-command))))

  (define-key global-map (kbd "<tab>") #'ahi-custom-tab)
#+end_src

#+RESULTS:
: ahi-custom-tab

We activate =copilot= in some specific modes:
#+begin_src elisp
  (add-hook 'text-mode-hook #'copilot-mode)
  (add-hook 'prog-mode-hook #'copilot-mode)
#+end_src

#+RESULTS:
| copilot-mode | flyspell-prog-mode |

#+begin_src elisp
  (defvar rk/copilot-manual-mode nil
    "When `t' will only show completions when manually triggered, e.g. via M-C-<return>.")

  (defun rk/copilot-change-activation ()
    "Switch between three activation modes:
  - automatic: copilot will automatically overlay completions
  - manual: you need to press a key (M-C-<return>) to trigger completions
  - off: copilot is completely disabled."
    (interactive)
    (if (and copilot-mode rk/copilot-manual-mode)
	(progn
	  (message "deactivating copilot")
	  (global-copilot-mode -1)
	  (setq rk/copilot-manual-mode nil))
      (if copilot-mode
	  (progn
	    (message "activating copilot manual mode")
	    (setq rk/copilot-manual-mode t))
	(message "activating copilot mode")
	(global-copilot-mode))))

  (define-key global-map (kbd "M-C-<escape>") #'rk/copilot-change-activation)
#+end_src

#+RESULTS:
: rk/copilot-change-activation

* Company Mode

#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :config
    (global-company-mode t))
  (setq company-idle-delay 0.1)

  (use-package company-box 
    :ensure t
    :diminish company-box-mode
    :hook (company-mode . company-box-mode))

#+end_src

#+RESULTS:
| company-box-mode | company-mode-set-explicitly |

* Spellchecking
Using ~company-spell~ and ~flyspell~
#+begin_src emacs-lisp 
  (use-package company-spell
        :ensure t
        :config (push 'company-spell company-backends))
  
  (use-package flyspell
    :ensure t
    :config
    (setq ispell-program-name "aspell")
    (setq ispell-dictionary "en")
    (add-hook 'text-mode-hook 'flyspell-mode)
    (add-hook 'prog-mode-hook 'flyspell-prog-mode))
#+end_src

#+RESULTS:
: t
(use-package flyspell
    :ensure t
    :config
    (setq ispell-program-name "aspell")
    (setq ispell-dictionary "en")
    (add-hook 'text-mode-hook 'flyspell-mode)
    (add-hook 'prog-mode-hook 'flyspell-prog-mode))
  

;;FlySpell+FlySpell-babel for Spellchecks using aspell
(autoload 'flyspell-babel-setup "flyspell-babel")
(setq-default ispell-program-name "aspell") 
(global-set-key (kbd "C-M-i") 'flyspell-popup-correct)
(global-set-key (kbd "C-<tab>") 'flyspell-popup-correct)
(add-hook 'flyspell-mode-hook 'flyspell-popup-auto-correct-mode)
;; enable flyspell in org-mode
(add-hook 'org-mode-hook 'flyspell-mode)
;; enable flyspell in latex-mode
(add-hook 'LaTeX-mode-hook 'flyspell-mode)

* De-Clutter Mode Line
Using diminish to hide specific modes from the mode line

#+begin_src elisp
  (use-package diminish
    :ensure t)
#+end_src
* Mixed Pitch mode
#+begin_src elisp
  (use-package mixed-pitch
    :hook
    (text-mode . mixed-pitch-mode)
    :diminish mixed-pitch-mode
    :config
    (set-face-attribute 'default nil :font "Fira Code" :height 120)
    (set-face-attribute 'fixed-pitch nil :font "Fira Code")
    (set-face-attribute 'variable-pitch nil :family "Inter"))
#+end_src

#+RESULTS:
| flyspell-mode | copilot-mode | (lambda nil (display-fill-column-indicator-mode 1)) | (lambda nil (display-line-numbers-mode 1)) | visual-line-mode | (lambda nil (setq adaptive-wrap-prefix-mode 1)) | (lambda nil (setq visual-fill-line-mode 1)) | turn-off-auto-fill | mixed-pitch-mode | text-mode-hook-identify |

* Change comletion behaviour in minibuffer
#+begin_src elisp
  (setq completion-styles '(substring
                            basic
                            partial-completion
                            emacs22))
#+end_src

#+RESULTS:
| substring | basic | partial-completion | emacs22 |

* Python Venvs
#+begin_src elisp
  (use-package pyvenv
    :ensure t
    :config
    (pyvenv-mode t)

    (setq pyvenv-post-activate-hooks
          (list (lambda ()
                  (setq python-shell-interpreter (concat pyvenv-virtual-env "bin/python3")))))
    (setq pyvenv-post-deactivate-hooks
          (list (lambda ()
                  (setq python-shell-interpreter "python3")))))
#+end_src

#+RESULTS:
: t

* Magit
#+begin_src elisp
  (use-package magit
    :ensure t
    :bind ("C-x g" . magit-status))
#+end_src
