* Plugin loaders
#+begin_src elisp
  (use-package quelpa
	:ensure t)
  (use-package quelpa-use-package
	:ensure t)
#+end_src

#+RESULTS:

* Org-related external file
Load general org-config from other file 
#+begin_src emacs-lisp
(with-eval-after-load "org"
  ;; load extra configs to org mode
  (org-babel-load-file "~/.emacs.d/org-config.org"))
#+end_src

* Org-Roam

Partly stolen from the following sites:
 - https://systemcrafters.net/build-a-second-brain-in-emacs/getting-started-with-org-roam/

Load Packages
#+begin_src emacs-lisp
  (require 'org-roam-dailies)
  (use-package org-roam
    :ensure t
    :custom
    (org-roam-directory "~/sciebo/org-roam")
    (org-roam-completion-everywhere t)
    (org-roam-mode-section-functions
     (list #'org-roam-backlinks-section
           #'org-roam-reflinks-section
           #'org-roam-unlinked-references-section
           ))
    :bind-keymap
    ("C-c n d" . org-roam-dailies-map)
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert)
           ("C-c n g" . org-roam-graph)
           ("C-c n c" . org-roam-capture)
           :map org-roam-dailies-map
           ("Y" . org-roam-dailies-capture-yesterday)
           ("T" . org-roam-dailies-capture-tomorrow)
           :map org-mode-map
           ("C-M-i" . completion-at-point))
  :config
  (org-roam-db-autosync-mode))
#+end_src

#+RESULTS:
: completion-at-point

** Add tags to node display
#+begin_src emacs-lisp
  (setq org-roam-node-display-template
      (concat "${title:*} "
              (propertize "${tags:10}" 'face 'org-tag)))
#+end_src

#+RESULTS:
: ${title:*} ${tags:10}

** bibtex config
Sets locations for notes, the bibtex-file and pdfs, specifies the template for notes
#+begin_src emacs-lisp
  (setq
   bibtex-completion-notes-path "~/sciebo/org-roam"
   bibtex-completion-bibliography "~/sciebo/org-roam/bibliography.bib"
   bibtex-completion-library-path "~/sciebo/org-roam/pdfs"
   bibtex-completion-pdf-field "file"
   bibtex-completion-notes-template-multiple-files
   (concat
	":PROPERTIES:\n:"
	"ID:         %(org-id-uuid)\n"
	":ROAM_REFS: @${=key=}\n"
	":ROAM_ALIASES: ${=key=}\n"
	":END:\n"
	"#+TITLE: ${title}\n"
	"#+ROAM_KEY: cite:${=key=}\n"
	"#+FILETAGS: paper\n"
	"- keywords :: ${keywords}\n"
	"* TODO Notes\n"
	":PROPERTIES:\n"
	":Custom_ID: ${=key=}\n"
	":NOTER_DOCUMENT: ./pdfs/${=key=}.pdf\n"
	":AUTHOR: ${author-abbrev}\n"
	":JOURNAL: ${journaltitle}\n"
	":DATE: ${date}\n"
	":YEAR: ${year}\n"
	":DOI: ${doi}\n"
	":URL: ${url}\n"
	":END:\n\n"
	)
   )
#+end_src

#+RESULTS:
#+begin_example
:PROPERTIES:
:ID:         %(org-id-uuid)
:ROAM_REFS: @${=key=}
:ROAM_ALIASES: ${=key=}
:END:
,#+TITLE: ${title}
,#+ROAM_KEY: cite:${=key=}
,#+FILETAGS: paper
- keywords :: ${keywords}
,* TODO Notes
:PROPERTIES:
:Custom_ID: ${=key=}
:NOTER_DOCUMENT: ./pdfs/${file}.pdf
:AUTHOR: ${author-abbrev}
:JOURNAL: ${journaltitle}
:DATE: ${date}
:YEAR: ${year}
:DOI: ${doi}
:URL: ${url}
:END:

#+end_example

Set keybinding, ~C-c n~ is org-roam prefix, so that fits

#+begin_src emacs-lisp
(global-set-key (kbd "C-c n r") 'ivy-bibtex) ; keybinding 
#+end_src

#+RESULTS:
: ivy-bibtex

** Org-Roam-Bibtex
#+begin_src emacs-lisp
    (use-package org-roam-bibtex
      :after (org-roam)
      :hook (org-roam-mode . org-roam-bibtex-mode)
      :config
      (setq org-roam-bibtex-preformat-keywords
       '("=key=" "title" "url" "file" "author-or-editor" "keywords"))
      (setq orb-templates
            '(("r" "ref" plain (function org-roam-capture--get-point)
               ""
               :file-name "${slug}"
               :head ":PROPERTIES:\n:ID:%(org-id-get-create)\n:ROAM_REFS:@${=key=}\n:END:\n
  #+TITLE: ${=key=}: ${title}\n#+ROAM_KEY: ${ref}

    - tags ::
    - keywords :: ${keywords}

    \n* ${title}\n  :PROPERTIES:\n  :Custom_ID: ${=key=}\n  :URL: ${url}\n  :AUTHOR: ${author-or-editor}\n  :NOTER_DOCUMENT: %(orb-process-file-field \"${=key=}\").pdf\n  :NOTER_PAGE: \n  :END:\n\n"

               :unnarrowed t))))

#+end_src

#+RESULTS:
| org-roam-bibtex-mode |

** Fix multiple-tag bug in ~org-roam-ui~
#+begin_src elisp
(setq org-roam-database-connector 'sqlite)
#+end_src

#+RESULTS:
: sqlite

** Org-download
#+begin_src elisp
  (use-package org-download
    :ensure t
    :config
    (setq-default org-download-image-dir "~/sciebo/org-roam/images")
    (setq-default org-download-heading-lvl nil))
#+end_src
    
* PDF-Tools
#+begin_src elisp
  (use-package pdf-tools
	:ensure t
	:config
	(pdf-tools-install))
#+end_src

#+RESULTS:
: t

** org-noter
Requires pdf-annot as workaround to a bug
#+begin_src elisp
  (use-package org-noter	
	:after (:any org pdf-view)
	:requires (pdf-tools pdf-annot)
	:ensure t
	:config
	(setq
	 org-noter-notes-window-location 'other-frame
	 org-noter-always-create-frame nil
	 org-noter-hide-other nil
	 org-noter-notes-search-path (list "~/sciebo/org-roam")
	 ))

  (use-package org-pdftools
	:hook (org-mode . org-pdftools-setup-link))
#+end_src

#+RESULTS:
| (closure (t) nil (font-lock-add-keywords nil '((next-color-link (0 'org-link t))) t)) | (lambda nil (display-fill-column-indicator-mode -1)) | org-indent-mode | org-pdftools-setup-link | #[0 \301\211\207 [imenu-create-index-function org-imenu-get-tree] 2] | org-ref-org-menu | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-fold-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes |

Setup integration of org-noter with org-roam
#+begin_src elisp
   
#+end_src


* Github Co-Pilot
** copilot-mode (Autocompletion)
Setup using [[https://robert.kra.hn/posts/2023-02-22-copilot-emacs-setup/][this blogpost]]

Load =copilot.el=

#+begin_src elisp
  (use-package copilot
    :quelpa (copilot :fetcher github
                   :repo "copilot-emacs/copilot.el"
                   :branch "main"
                   :files ("dist" "*.el"))
    :ensure t
    ;; don't show in mode line
    :diminish
    :config (setq copilot-indent-offset-warning-disable t)
                                          ;start copilot agent
    (copilot--start-agent) 
    :bind (("C-c c c" . copilot-complete)
           ("C-c c a" . copilot-accept-completion) ; probably im going to use Tab more often
           ("C-c <right>" . copilot-accept-completion-by-word)
           ("C-c S-<right>" . copilot-accept-completion-by-line)
           ("C-c c <down>" . copilot-next-completion)
           ("C-c c <up>". copilot-previous-completion)))  
#+end_src

#+RESULTS:
: copilot-previous-completion

Set up tabulator to use copilot, company or indentation.

This is currently disabled, because it overwrites the default
tab behavior, e.g. causing problems with magit
#+begin_src
  (defun ahi-custom-tab ()
    "Tab command that will complet with copilot if a completion is
  available. Otherwise will try company, yasnippet or normal
  tab-indent."
    (interactive)
    (cond ((minibufferp) (minibuffer-complete))
          ((use-region-p) (indent-region (region-beginning) (region-end)))
          ((and (bound-and-true-p copilot-mode) (copilot-accept-completion)))
          ((and (bound-and-true-p company-mode) (company-complete)))
          ((and (bound-and-true-p yas-minor-mode) (yas-expand)))
          (t (tab-always-)))))))

  (define-key global-map (kbd "<tab>") #'ahi-custom-tab)
#+end_src

#+RESULTS:
: ahi-custom-tab

We activate =copilot= in some specific modes:
#+begin_src elisp
  (add-hook 'text-mode-hook #'copilot-mode)
  (add-hook 'prog-mode-hook #'copilot-mode)
#+end_src

#+RESULTS:
| copilot-mode | flyspell-prog-mode |

#+begin_src elisp
  (defvar rk/copilot-manual-mode nil
    "When `t' will only show completions when manually triggered, e.g. via M-C-<return>.")

  (defun rk/copilot-change-activation ()
    "Switch between three activation modes:
  - automatic: copilot will automatically overlay completions
  - manual: you need to press a key (M-C-<return>) to trigger completions
  - off: copilot is completely disabled."
    (interactive)
    (if (and copilot-mode rk/copilot-manual-mode)
	(progn
	  (message "deactivating copilot")
	  (global-copilot-mode -1)
	  (setq rk/copilot-manual-mode nil))
      (if copilot-mode
	  (progn
	    (message "activating copilot manual mode")
	    (setq rk/copilot-manual-mode t))
	(message "activating copilot mode")
	(global-copilot-mode))))

  (define-key global-map (kbd "M-C-<escape>") #'rk/copilot-change-activation)
#+end_src

#+RESULTS:
: rk/copilot-change-activation
** copilot-chat (Chat with Co-Pilot)

#+begin_src elisp
  (use-package copilot-chat
    :quelpa (copilot-chat :fetcher github
                          :repo "chep/copilot-chat.el"
                          :branch "master"
                          :files ("*.el"))
    :after (request shell-maker)
    :custom
    (copilot-chat-frontend 'shell-maker)
    :config
    (require 'copilot-chat-shell-maker)
    (push '(shell-maker . copilot-chat-shell-maker-init) copilot-chat-frontend-list)
    (copilot-chat-shell-maker-init))
#+end_src

#+RESULTS:
: t

* Company Mode

#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :config
    (global-company-mode t))
  (setq company-idle-delay 0.1)

  (use-package company-box 
    :ensure t
    :diminish company-box-mode
    :hook (company-mode . company-box-mode))

#+end_src

#+RESULTS:
| company-box-mode | company-mode-set-explicitly |

* Spellchecking
Using ~company-spell~ and ~flyspell~
#+begin_src emacs-lisp 
  (use-package company-spell
        :ensure t
        :config (push 'company-spell company-backends))
  
  (use-package flyspell
    :ensure t
    :config
    (setq ispell-program-name "aspell")
    (setq ispell-dictionary "en")
    (add-hook 'text-mode-hook 'flyspell-mode)
    (add-hook 'prog-mode-hook 'flyspell-prog-mode))
#+end_src

#+RESULTS:
: t
(use-package flyspell
    :ensure t
    :config
    (setq ispell-program-name "aspell")
    (setq ispell-dictionary "en")
    (add-hook 'text-mode-hook 'flyspell-mode)
    (add-hook 'prog-mode-hook 'flyspell-prog-mode))
  

;;FlySpell+FlySpell-babel for Spellchecks using aspell
(autoload 'flyspell-babel-setup "flyspell-babel")
(setq-default ispell-program-name "aspell") 
(global-set-key (kbd "C-M-i") 'flyspell-popup-correct)
(global-set-key (kbd "C-<tab>") 'flyspell-popup-correct)
(add-hook 'flyspell-mode-hook 'flyspell-popup-auto-correct-mode)
;; enable flyspell in org-mode
(add-hook 'org-mode-hook 'flyspell-mode)
;; enable flyspell in latex-mode
(add-hook 'LaTeX-mode-hook 'flyspell-mode)

In org-files we select the Dictionary for Flyspell based on the language tag in the header

#+begin_src emacs-lisp
(defun ahi-org-set-flyspell-language ()
  "Set Flyspell dictionary based on the #+LANGUAGE tag in the Org file."
  (when (derived-mode-p 'org-mode)
    (save-excursion
      (goto-char (point-min))
      (when (re-search-forward "^#\\+LANGUAGE: \\(.*\\)" nil t)
        (let ((lang (match-string 1)))
          (cond
           ((string= lang "en") (ispell-change-dictionary "english"))
           ((string= lang "de") (ispell-change-dictionary "deutsch"))
           ;; Add more languages here as needed
           (t (message "Unsupported language: %s" lang))))))))

(add-hook 'org-mode-hook #'ahi-org-set-flyspell-language)
#+end_src

#+RESULTS:
| ahi-org-set-flyspell-language | (closure (t) nil (font-lock-add-keywords nil '((next-color-link (0 'org-link t))) t)) | (lambda nil (set (make-variable-buffer-local 'TeX-electric-math) (cons \( \)))) | (lambda nil (display-fill-column-indicator-mode -1)) | org-indent-mode | org-pdftools-setup-link | #[0 \301\211\207 [imenu-create-index-function org-imenu-get-tree] 2] | org-ref-org-menu | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-fold-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes |

* De-Clutter Mode Line
Using diminish to hide specific modes from the mode line

#+begin_src elisp
  (use-package diminish
    :ensure t)
#+end_src

* Programming Modes
** Mixed Pitch mode
#+begin_src elisp
  (use-package mixed-pitch
    :hook
    (text-mode . mixed-pitch-mode)
    :diminish mixed-pitch-mode
    :config
    (set-face-attribute 'default nil :font "Fira Code" :height 120)
    (set-face-attribute 'fixed-pitch nil :font "Fira Code")
    (set-face-attribute 'variable-pitch nil :family "Inter"))
#+end_src

#+RESULTS:
| flyspell-mode | copilot-mode | (lambda nil (display-fill-column-indicator-mode 1)) | (lambda nil (display-line-numbers-mode 1)) | visual-line-mode | (lambda nil (setq adaptive-wrap-prefix-mode 1)) | (lambda nil (setq visual-fill-line-mode 1)) | turn-off-auto-fill | mixed-pitch-mode | text-mode-hook-identify |

** Jinja2 Mode
#+BEGIN_SRC emacs-lisp
    (use-package jinja2-mode
        :ensure t
        :mode ("\\.jinja2\\'" . jinja2-mode)
        :config
        (add-to-list 'auto-mode-alist '("\\.jinja2\\'" . jinja2-mode)))
#+END_SRC

#+RESULTS:
: ((\.j2\' . jinja2-mode) (\.jinja2\' . jinja2-mode) (\.[pP][dD][fF]\' . pdf-view-mode) (\.odc\' . archive-mode) (\.odf\' . archive-mode) (\.odi\' . archive-mode) (\.otp\' . archive-mode) (\.odp\' . archive-mode) (\.otg\' . archive-mode) (\.odg\' . archive-mode) (\.ots\' . archive-mode) (\.ods\' . archive-mode) (\.odm\' . archive-mode) (\.ott\' . archive-mode) (\.odt\' . archive-mode) (\.hva\' . LaTeX-mode) (\.dockerfile\' . dockerfile-mode) ([/\]\(?:Containerfile\|Dockerfile\)\(?:\.[^/\]*\)?\' . dockerfile-mode) (\.editorconfig\' . editorconfig-conf-mode) (\.ipynb\' . ein:ipynb-mode) (\.fsti?\' . fstar-mode) (go\.work\' . go-dot-work-mode) (go\.mod\' . go-dot-mod-mode) (\.go\' . go-mode) (\.hsc\' . haskell-mode) (\.l[gh]s\' . haskell-literate-mode) (\.hsig\' . haskell-mode) (\.[gh]s\' . haskell-mode) (\.cabal\'\|/cabal\.project\|/\.cabal/config\' . haskell-cabal-mode) (\.chs\' . haskell-c2hs-mode) (\.ghci\' . ghci-script-mode) (\.dump-simpl\' . ghc-core-mode) (\.hcr\' . ghc-core-mode) (\.ini\' . ini-mode) (/git-rebase-todo\' . git-rebase-mode) (\.\(?:php[s345]?\|phtml\)\' . php-mode-maybe) (\.\(?:php\.inc\|stub\)\' . php-mode) (/\.php_cs\(?:\.dist\)?\' . php-mode) (\.rs\' . rustic-mode) (\.\(?:md\|markdown\|mkd\|mdown\|mkdn\|mdwn\)\' . markdown-mode) (\.rs\' . rust-mode) (\.\(e?ya?\|ra\)ml\' . yaml-mode) (\.gpg\(~\|\.~[0-9]+~\)?\' nil epa-file) (\.elc\' . elisp-byte-code-mode) (\.zst\' nil jka-compr) (\.dz\' nil jka-compr) (\.xz\' nil jka-compr) (\.lzma\' nil jka-compr) (\.lz\' nil jka-compr) (\.g?z\' nil jka-compr) (\.bz2\' nil jka-compr) (\.Z\' nil jka-compr) (\.vr[hi]?\' . vera-mode) (\(?:\.\(?:rbw?\|ru\|rake\|thor\|jbuilder\|rabl\|gemspec\|podspec\)\|/\(?:Gem\|Rake\|Cap\|Thor\|Puppet\|Berks\|Brew\|Vagrant\|Guard\|Pod\)file\)\' . ruby-mode) (\.re?st\' . rst-mode) (\.py[iw]?\' . python-mode) (\.m\' . octave-maybe-mode) (\.less\' . less-css-mode) (\.scss\' . scss-mode) (\.cs\' . csharp-mode) (\.awk\' . awk-mode) (\.\(u?lpc\|pike\|pmod\(\.in\)?\)\' . pike-mode) (\.idl\' . idl-mode) (\.java\' . java-mode) (\.m\' . objc-mode) (\.ii\' . c++-mode) (\.i\' . c-mode) (\.lex\' . c-mode) (\.y\(acc\)?\' . c-mode) (\.h\' . c-or-c++-mode) (\.c\' . c-mode) (\.\(CC?\|HH?\)\' . c++-mode) (\.[ch]\(pp\|xx\|\+\+\)\' . c++-mode) (\.\(cc\|hh\)\' . c++-mode) (\.\(bat\|cmd\)\' . bat-mode) (\.[sx]?html?\(\.[a-zA-Z_]+\)?\' . mhtml-mode) (\.svgz?\' . image-mode) (\.svgz?\' . xml-mode) (\.x[bp]m\' . image-mode) (\.x[bp]m\' . c-mode) (\.p[bpgn]m\' . image-mode) (\.tiff?\' . image-mode) (\.gif\' . image-mode) (\.png\' . image-mode) (\.jpe?g\' . image-mode) (\.webp\' . image-mode) (\.te?xt\' . text-mode) (\.[tT]e[xX]\' . tex-mode) (\.ins\' . tex-mode) (\.ltx\' . latex-mode) (\.dtx\' . doctex-mode) (\.org\' . org-mode) (\.dir-locals\(?:-2\)?\.el\' . lisp-data-mode) (\.eld\' . lisp-data-mode) (eww-bookmarks\' . lisp-data-mode) (tramp\' . lisp-data-mode) (/archive-contents\' . lisp-data-mode) (places\' . lisp-data-mode) (\.emacs-places\' . lisp-data-mode) (\.el\' . emacs-lisp-mode) (Project\.ede\' . emacs-lisp-mode) (\.\(scm\|sls\|sld\|stk\|ss\|sch\)\' . scheme-mode) (\.l\' . lisp-mode) (\.li?sp\' . lisp-mode) (\.[fF]\' . fortran-mode) (\.for\' . fortran-mode) (\.p\' . pascal-mode) (\.pas\' . pascal-mode) (\.\(dpr\|DPR\)\' . delphi-mode) (\.\([pP]\([Llm]\|erl\|od\)\|al\)\' . perl-mode) (Imakefile\' . makefile-imake-mode) (Makeppfile\(?:\.mk\)?\' . makefile-makepp-mode) (\.makepp\' . makefile-makepp-mode) (\.mk\' . makefile-gmake-mode) (\.make\' . makefile-gmake-mode) ([Mm]akefile\' . makefile-gmake-mode) (\.am\' . makefile-automake-mode) (\.texinfo\' . texinfo-mode) (\.te?xi\' . texinfo-mode) (\.[sS]\' . asm-mode) (\.asm\' . asm-mode) (\.css\' . css-mode) (\.mixal\' . mixal-mode) (\.gcov\' . compilation-mode) (/\.[a-z0-9-]*gdbinit . gdb-script-mode) (-gdb\.gdb . gdb-script-mode) ([cC]hange\.?[lL]og?\' . change-log-mode) ([cC]hange[lL]og[-.][0-9]+\' . change-log-mode) (\$CHANGE_LOG\$\.TXT . change-log-mode) (\.scm\.[0-9]*\' . scheme-mode) (\.[ckz]?sh\'\|\.shar\'\|/\.z?profile\' . sh-mode) (\.bash\' . sh-mode) (/PKGBUILD\' . sh-mode) (\(/\|\`\)\.\(bash_\(profile\|history\|log\(in\|out\)\)\|z?log\(in\|out\)\)\' . sh-mode) (\(/\|\`\)\.\(shrc\|zshrc\|m?kshrc\|bashrc\|t?cshrc\|esrc\)\' . sh-mode) (\(/\|\`\)\.\([kz]shenv\|xinitrc\|startxrc\|xsession\)\' . sh-mode) (\.m?spec\' . sh-mode) (\.m[mes]\' . nroff-mode) (\.man\' . nroff-mode) (\.sty\' . latex-mode) (\.cl[so]\' . latex-mode) (\.bbl\' . latex-mode) (\.bib\' . bibtex-mode) (\.bst\' . bibtex-style-mode) (\.sql\' . sql-mode) (\(acinclude\|aclocal\|acsite\)\.m4\' . autoconf-mode) (\.m[4c]\' . m4-mode) (\.mf\' . metafont-mode) (\.mp\' . metapost-mode) (\.vhdl?\' . vhdl-mode) (\.article\' . text-mode) (\.letter\' . text-mode) (\.i?tcl\' . tcl-mode) (\.exp\' . tcl-mode) (\.itk\' . tcl-mode) (\.icn\' . icon-mode) (\.sim\' . simula-mode) (\.mss\' . scribe-mode) (\.f9[05]\' . f90-mode) (\.f0[38]\' . f90-mode) (\.indent\.pro\' . fundamental-mode) (\.\(pro\|PRO\)\' . idlwave-mode) (\.srt\' . srecode-template-mode) (\.prolog\' . prolog-mode) (\.tar\' . tar-mode) (\.\(arc\|zip\|lzh\|lha\|zoo\|[jew]ar\|xpi\|rar\|cbr\|7z\|squashfs\|ARC\|ZIP\|LZH\|LHA\|ZOO\|[JEW]AR\|XPI\|RAR\|CBR\|7Z\|SQUASHFS\)\' . archive-mode) (\.oxt\' . archive-mode) (\.\(deb\|[oi]pk\)\' . archive-mode) (\`/tmp/Re . text-mode) (/Message[0-9]*\' . text-mode) (\`/tmp/fol/ . text-mode) (\.oak\' . scheme-mode) (\.sgml?\' . sgml-mode) (\.x[ms]l\' . xml-mode) (\.dbk\' . xml-mode) (\.dtd\' . sgml-mode) (\.ds\(ss\)?l\' . dsssl-mode) (\.js[mx]?\' . javascript-mode) (\.har\' . javascript-mode) (\.json\' . js-json-mode) (\.[ds]?va?h?\' . verilog-mode) (\.by\' . bovine-grammar-mode) (\.wy\' . wisent-grammar-mode) (\.erts\' . erts-mode) ([:/\]\..*\(emacs\|gnus\|viper\)\' . emacs-lisp-mode) (\`\..*emacs\' . emacs-lisp-mode) ([:/]_emacs\' . emacs-lisp-mode) (/crontab\.X*[0-9]+\' . shell-script-mode) (\.ml\' . lisp-mode) (\.ld[si]?\' . ld-script-mode) (ld\.?script\' . ld-script-mode) (\.xs\' . c-mode) (\.x[abdsru]?[cnw]?\' . ld-script-mode) (\.zone\' . dns-mode) (\.soa\' . dns-mode) (\.asd\' . lisp-mode) (\.\(asn\|mib\|smi\)\' . snmp-mode) (\.\(as\|mi\|sm\)2\' . snmpv2-mode) (\.\(diffs?\|patch\|rej\)\' . diff-mode) (\.\(dif\|pat\)\' . diff-mode) (\.[eE]?[pP][sS]\' . ps-mode) (\.\(?:PDF\|EPUB\|CBZ\|FB2\|O?XPS\|DVI\|OD[FGPST]\|DOCX\|XLSX?\|PPTX?\|pdf\|epub\|cbz\|fb2\|o?xps\|djvu\|dvi\|od[fgpst]\|docx\|xlsx?\|pptx?\)\' . doc-view-mode-maybe) (configure\.\(ac\|in\)\' . autoconf-mode) (\.s\(v\|iv\|ieve\)\' . sieve-mode) (BROWSE\' . ebrowse-tree-mode) (\.ebrowse\' . ebrowse-tree-mode) (#\*mail\* . mail-mode) (\.g\' . antlr-mode) (\.mod\' . m2-mode) (\.ses\' . ses-mode) (\.docbook\' . sgml-mode) (\.com\' . dcl-mode) (/config\.\(?:bat\|log\)\' . fundamental-mode) (/\.\(authinfo\|netrc\)\' . authinfo-mode) (\.\(?:[iI][nN][iI]\|[lL][sS][tT]\|[rR][eE][gG]\|[sS][yY][sS]\)\' . conf-mode) (\.la\' . conf-unix-mode) (\.ppd\' . conf-ppd-mode) (java.+\.conf\' . conf-javaprop-mode) (\.properties\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-javaprop-mode) (\.toml\' . conf-toml-mode) (\.desktop\' . conf-desktop-mode) (/\.redshift\.conf\' . conf-windows-mode) (\`/etc/\(?:DIR_COLORS\|ethers\|.?fstab\|.*hosts\|lesskey\|login\.?de\(?:fs\|vperm\)\|magic\|mtab\|pam\.d/.*\|permissions\(?:\.d/.+\)?\|protocols\|rpc\|services\)\' . conf-space-mode) (\`/etc/\(?:acpid?/.+\|aliases\(?:\.d/.+\)?\|default/.+\|group-?\|hosts\..+\|inittab\|ksysguarddrc\|opera6rc\|passwd-?\|shadow-?\|sysconfig/.+\)\' . conf-mode) ([cC]hange[lL]og[-.][-0-9a-z]+\' . change-log-mode) (/\.?\(?:gitconfig\|gnokiirc\|hgrc\|kde.*rc\|mime\.types\|wgetrc\)\' . conf-mode) (/\.mailmap\' . conf-unix-mode) (/\.\(?:asound\|enigma\|fetchmail\|gltron\|gtk\|hxplayer\|mairix\|mbsync\|msmtp\|net\|neverball\|nvidia-settings-\|offlineimap\|qt/.+\|realplayer\|reportbug\|rtorrent\.\|screen\|scummvm\|sversion\|sylpheed/.+\|xmp\)rc\' . conf-mode) (/\.\(?:gdbtkinit\|grip\|mpdconf\|notmuch-config\|orbital/.+txt\|rhosts\|tuxracer/options\)\' . conf-mode) (/\.?X\(?:default\|resource\|re\)s\> . conf-xdefaults-mode) (/X11.+app-defaults/\|\.ad\' . conf-xdefaults-mode) (/X11.+locale/.+/Compose\' . conf-colon-mode) (/X11.+locale/compose\.dir\' . conf-javaprop-mode) (\.~?[0-9]+\.[0-9][-.0-9]*~?\' nil t) (\.\(?:orig\|in\|[bB][aA][kK]\)\' nil t) ([/.]c\(?:on\)?f\(?:i?g\)?\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-mode-maybe) (\.[1-9]\' . nroff-mode) (\.art\' . image-mode) (\.avs\' . image-mode) (\.bmp\' . image-mode) (\.cmyk\' . image-mode) (\.cmyka\' . image-mode) (\.crw\' . image-mode) (\.dcr\' . image-mode) (\.dcx\' . image-mode) (\.dng\' . image-mode) (\.dpx\' . image-mode) (\.fax\' . image-mode) (\.heic\' . image-mode) (\.hrz\' . image-mode) (\.icb\' . image-mode) (\.icc\' . image-mode) (\.icm\' . image-mode) (\.ico\' . image-mode) (\.icon\' . image-mode) (\.jbg\' . image-mode) (\.jbig\' . image-mode) (\.jng\' . image-mode) (\.jnx\' . image-mode) (\.miff\' . image-mode) (\.mng\' . image-mode) (\.mvg\' . image-mode) (\.otb\' . image-mode) (\.p7\' . image-mode) (\.pcx\' . image-mode) (\.pdb\' . image-mode) (\.pfa\' . image-mode) (\.pfb\' . image-mode) (\.picon\' . image-mode) (\.pict\' . image-mode) (\.rgb\' . image-mode) (\.rgba\' . image-mode) (\.tga\' . image-mode) (\.wbmp\' . image-mode) (\.webp\' . image-mode) (\.wmf\' . image-mode) (\.wpg\' . image-mode) (\.xcf\' . image-mode) (\.xmp\' . image-mode) (\.xwd\' . image-mode) (\.yuv\' . image-mode) (\.tgz\' . tar-mode) (\.tbz2?\' . tar-mode) (\.txz\' . tar-mode) (\.tzst\' . tar-mode) (\.drv\' . LaTeX-mode))

* Minibuffer stuff
** Change comletion behaviour in minibuffer
#+begin_src elisp
  (setq completion-styles '(substring
                            basic
                            partial-completion
                            emacs22))
#+end_src

#+RESULTS:
| substring | basic | partial-completion | emacs22 |
** Activate save history mode
#+begin_src elisp
  (savehist-mode 1)
#+end_src

#+RESULTS:
: t

    
* Magit
#+begin_src elisp
  (use-package magit
    :ensure t
    :bind ("C-x g" . magit-status))
#+end_src

* Configure line-numbers, line lengths etc.
** Programming Modes Configuration
To enhance programming modes, we will:
1. Enable a visual indicator at 80 characters for line length.
2. Display line numbers in the left margin.

#+begin_src emacs-lisp
  ;; Enable line numbers and set a fill column indicator for programming modes
  (defun my-prog-mode-setup ()
    "Custom setup for programming modes."
    (display-line-numbers-mode 1)  ;; Enable line numbers
    ;;(setq display-line-numbers 'relative) ;; Optional: Use relative line numbers
    (setq fill-column 80)  ;; Set the fill column to 80 characters
    (display-fill-column-indicator-mode 1) ;; Show a vertical line at 80 chars
    (visual-line-mode -1)) ;; disable visual line mode

  ;; Hook the setup to all programming modes
  (add-hook 'prog-mode-hook 'my-prog-mode-setup)
#+end_src

#+RESULTS:
| my-prog-mode-setup | #[nil ((visual-fill-column-mode -1)) nil] | #[nil ((visual-fill-column-mode 1)) nil] | #[nil ((display-fill-column-indicator-mode -1)) nil] | format-all-mode | #[nil ((display-fill-column-indicator-mode 1)) nil] | #[nil ((display-line-numbers-mode 1)) nil] | flyspell-prog-mode | copilot-mode |
| my-prog-mode-setup | #[nil ((visual-fill-column-mode -1)) nil] | #[nil ((visual-fill-column-mode 1)) nil] | #[nil ((display-fill-column-indicator-mode -1)) nil] | format-all-mode | #[nil ((display-fill-column-indicator-mode 1)) nil] | #[nil ((display-line-numbers-mode 1)) nil] | flyspell-prog-mode | copilot-mode |

** Text Modes Configuration
For text modes like Org, Markdown, and LaTeX, we will:
1. Disable line numbers.
2. Enable visual line wrapping for better readability.

#+begin_src emacs-lisp
  ;; Disable line numbers and enable visual line wrapping for text modes
  (defun my-text-mode-setup ()
    "Custom setup for text modes."
    (display-line-numbers-mode 0)  ;; Disable line numbers
    (visual-line-mode 1))  ;; Enable visual line wrapping

  ;; Hook the setup to common text modes
  (add-hook 'text-mode-hook 'my-text-mode-setup)
#+end_src

#+RESULTS:
| my-text-mode-setup | #[nil ((display-fill-column-indicator-mode 1)) nil] | visual-line-mode | #[nil ((setq adaptive-wrap-prefix-mode 1)) nil] | #[nil ((setq visual-fill-line-mode 1)) nil] | mixed-pitch-mode | flyspell-mode | copilot-mode | turn-off-auto-fill | text-mode-hook-identify |

Apply the prog-mode setup to some "programming" modes derived from text-modes.
These modes are:
- html-mode
- web-mode

#+begin_src elisp
(add-hook 'html-mode-hook 'my-prog-mode-setup)
(add-hook 'web-mode-hook 'my-prog-mode-setup)
#+end_src


#+RESULTS:
| my-prog-mode-setup |

** Multi-line mode
#+begin_src elisp
  (use-package multi-line
	:ensure t
	;;:hook (prog-mode . multi-line-mode)
	:bind ("C-c m" . multi-line))
#+end_src

#+RESULTS:
: multi-line

* Ebib
Use ebib mode for bibtex files
#+begin_src elisp
  (use-package ebib
	:ensure t
	:config
	(setq ebib-preload-bib-files '("~/sciebo/org-roam/bibliography.bib"))
	(setq ebib-file-search-dirs '("~/sciebo/org-roam")))
#+end_src

#+RESULTS:
: t

* Electric Pair Mode
Automatically close brakets, parentheses etc.
Add $ to the list of characters that trigger electric pair mode
#+begin_src elisp
  (electric-pair-mode 1)
  (setq electric-pair-pairs '(
                              (?\" . ?\")
                              (?\{ . ?\})
                              (?\( . ?\))
                              (?\[ . ?\])
                              (?$ . ?$)
                              ))
#+end_src
#+RESULTS:
: ((34 . 34) (123 . 125) (40 . 41) (91 . 93) (36 . 36))

* Auto-formatting
Load format-all and enable it in programming modes. Load default formatter for python
#+begin_src elisp
  (use-package format-all
    :ensure t
    :hook ((prog-mode . format-all-mode)
           (format-all-mode . format-all-ensure-formatter)
           )
    :config (setq-default format-all-formatters
                    '(("Python" (black))
                      ("Shell" (shfmt "-i" "4" "-ci"))
                      ("HTML" (djlint "." "--reformat"))
                    )))
  (with-eval-after-load 'format-all
    (define-format-all-formatter djlint
  		   (:executable "djlint")
  		   (:install "pip install djlint")
  		   (:languages "HTML Jinja2")
  		   (:features)
  		   (:format (format-all--buffer-easy
  					 executable "--reformat"
  					 "-"))))
    
#+end_src

#+RESULTS:
: djlint

* Include other files
#+begin_src elisp
  (org-babel-load-file
   (expand-file-name "python_stuff.org"
                   user-emacs-directory))
#+end_src

#+RESULTS:
: Loaded /home/ahi/.emacs.d/python_stuff.el


* scratch as org mode buffer
I use the scratch buffer for text more often than not, so I set it to org mode
#+begin_src elisp
  (setq initial-major-mode 'org-mode)
  (setq initial-scratch-message "#+TITLE: Scratch\n#+Description: Scratch buffer for notes and ideas. Save it to a file to keep it.\n\n")
#+end_src

#+RESULTS:
: #+TITLE: Scratch
: #+Description: Scratch buffer for notes and ideas. Save it to a file to keep it.

* Disable startup screen
#+begin_src elisp
  (setq inhibit-startup-screen t)
#+end_src

* Multiple cursors mode

#+begin_src elisp
(use-package multiple-cursors)
(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
#+end_src

#+RESULTS:
: mc/mark-all-like-this
